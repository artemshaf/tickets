# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddRoleUserInput {
  userId: Float!
  value: String!
}

"""City"""
type City {
  city: String!
  countryId: Float!
  id: ID!
}

"""Country"""
type Country {
  country: String!
  id: ID!
}

input CreateCityInput {
  city: String!
  countryId: Float!
}

input CreateCountryInput {
  country: String!
}

input CreateEventHoldingInput {
  address: String!
  name: String!
}

input CreateEventHoldingPlacementInput {
  eventHoldingId: Float!
  name: String!
  places: JSON!
}

input CreateEventInput {
  date: DateTime!
  genreId: Float!
  locationId: Float!
  placeId: Float!
}

input CreateGenreInput {
  description: String!
  genre: String!
}

input CreateRoleInput {
  description: String!
  value: String!
}

input CreateTicketInput {
  eventId: Float!
  eventPlaceId: Float!
  userId: Float!
}

input CreateUserInput {
  email: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  date: DateTime!
  genreId: Float!
  id: ID!
  placeId: Float!
}

type EventHolding {
  address: String!
  id: ID!
  name: String!
}

type EventHoldingPlacement {
  eventHoldingId: Float!
  id: ID!
  name: String!
  places: JSON!
}

type Genre {
  description: String!
  genre: String!
  id: ID!
}

type GetGenerateTokensDto {
  accessToken: String!
  refreshToken: String!
}

type GetRefreshTokenDto {
  id: Float!
  refreshToken: String
  userId: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LoginResponseDto {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Mutation {
  addRole(addRole: AddRoleUserInput!): User!
  create(createUser: CreateUserInput!): User!
  createCity(createCity: CreateCityInput!): City!
  createCountry(createCountry: CreateCountryInput!): Country!
  createEvent(createEvent: CreateEventInput!): Event!
  createEventHolding(createEventHolding: CreateEventHoldingInput!): EventHolding!
  createEventHoldingPlacement(eventHoldingPlacement: CreateEventHoldingPlacementInput!): EventHoldingPlacement!
  createGenre(createGenre: CreateGenreInput!): Genre!
  createRole(createRole: CreateRoleInput!): Role!
  createTicket(createTicket: CreateTicketInput!): Ticket!
  deleteAllUsers: [User!]!
  deleteGenreByValue(value: String!): Genre!
  deleteTicket(id: Float!): Ticket!
  login(login: CreateUserInput!): LoginResponseDto!
  logout(userId: Int!): RefreshToken!
  refreshTokens: GetGenerateTokensDto!
  registration(registration: CreateUserInput!): User!
}

type Query {
  getAllEventHoldings: [EventHolding!]!
  getAllEventHoldingsPlacement: [EventHoldingPlacement!]!
  getAllEvents: [Event!]!
  getAllRoles: [Role!]!
  getAllTickets: Ticket!
  getAllTokens: [GetRefreshTokenDto!]!
  getAllUsers: [User!]!
  getCityByValue(value: String!): City!
  getCountryByValue(value: String!): Country!
  getEvent(id: Float!): Event!
  getEventHoldingByName(value: String!): EventHolding!
  getEventHoldingPlacement(getEventHoldingPlacement: Float!): EventHoldingPlacement!
  getGenreByValue(value: String!): Genre!
  getRefreshTokenByUserId(id: Int!): GetRefreshTokenDto!
  getRoleByValye(value: String!): Role!
  getTicketById(id: Float!): Ticket!
  getUserByEmail(email: String!): User!
}

type RefreshToken {
  id: ID!
  refreshToken: String!
  userId: Float!
}

type Role {
  description: String!
  id: ID!
  value: String!
}

type Subscription {
  notificationCreateGenre(genre: String!): Genre!
}

type Ticket {
  eventId: Float!
  id: ID!
  userId: Float!
}

type User {
  email: String!
  id: ID!
  password: String!
}